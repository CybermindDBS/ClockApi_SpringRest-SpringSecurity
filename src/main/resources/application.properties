spring.application.name=SpringRest_refresher
# Server settings
server.port=8080
#server.servlet.context-path=/api
# Sprint Rest Settings
#Format JSON output
spring.jackson.serialization.indent_output=true
# Spring MVC Settings
spring.mvc.servlet.path=/
#view handler settings
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.cache=false
#Jpa config
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
#Datasource config for storing user details for my clock client.
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.h2.console.enabled=true
#OAuth 2.0 client credentials grant type configs to be used by the client(WebClient) for authentication
spring.security.oauth2.client.registration.my-client.client-id=my-clock
spring.security.oauth2.client.registration.my-client.client-secret=secret1
spring.security.oauth2.client.registration.my-client.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.my-client.scope=READ_DATETIME,WRITE_DATETIME
spring.security.oauth2.client.registration.my-client.provider=my-provider
spring.security.oauth2.client.provider.my-provider.token-uri=http://localhost:8080/oauth2/token
#Google OAuth 2.0 authorization code grant type configs on client side.
spring.security.oauth2.client.registration.google.client-id=<your-client-id>
spring.security.oauth2.client.registration.google.client-secret=<your-client-secret>
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/webapp/login/oauth2/code/{registrationId}
#MyAuth(our authorization server) OAuth 2.0 authorization code grant type configs on client side.
spring.security.oauth2.client.registration.my-auth.client-id=MyClock
spring.security.oauth2.client.registration.my-auth.client-secret=secret2
spring.security.oauth2.client.registration.my-auth.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.my-auth.redirect-uri={baseUrl}/webapp/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.my-auth.scope=openid
spring.security.oauth2.client.provider.my-auth-provider.authorization-uri=http://localhost:8080/oauth2/authorize
spring.security.oauth2.client.provider.my-auth-provider.token-uri=http://localhost:8080/oauth2/token
spring.security.oauth2.client.provider.my-auth-provider.user-info-uri=http://localhost:8080/userinfo
spring.security.oauth2.client.provider.my-auth-provider.jwk-set-uri=http://localhost:8080/oauth2/jwks
spring.security.oauth2.client.provider.my-auth-provider.user-name-attribute=sub
spring.security.oauth2.client.registration.my-auth.provider=my-auth-provider
#OAuth 2.0 resource server config
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/oauth2/jwks



